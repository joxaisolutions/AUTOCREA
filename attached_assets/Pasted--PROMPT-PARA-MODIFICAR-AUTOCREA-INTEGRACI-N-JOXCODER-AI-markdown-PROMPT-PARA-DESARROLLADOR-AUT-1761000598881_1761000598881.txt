üöÄ PROMPT PARA MODIFICAR AUTOCREA - INTEGRACI√ìN JOXCODER AI
markdown
# PROMPT PARA DESARROLLADOR AUTOCREA

## üéØ CONTEXTO Y OBJETIVO
**AUTOCREA** necesita ser modificada para integrar **JoxCoder AI** (modelo de IA que escribe c√≥digo multi-rol). El modelo estar√° listo en 6-7 horas y debe integrarse inmediatamente.

## üìã REQUISITOS T√âCNICOS DE INTEGRACI√ìN

### 1. ESTRUCTURA DE ARCHIVOS A CREAR:
autocrea/
‚îú‚îÄ‚îÄ src/
‚îÇ ‚îú‚îÄ‚îÄ joxcoder/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ integration/
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ joxcoder_client.py
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ code_analyzer.py
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ git_manager.py
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ models/
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ joxcoder_model.py
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ prompts/
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ role_prompts.json
‚îÇ ‚îú‚îÄ‚îÄ api/
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ joxcoder_routes.py
‚îÇ ‚îî‚îÄ‚îÄ ui/
‚îÇ ‚îî‚îÄ‚îÄ components/
‚îÇ ‚îî‚îÄ‚îÄ JoxCoderInterface.vue
‚îú‚îÄ‚îÄ config/
‚îÇ ‚îî‚îÄ‚îÄ joxcoder_config.yaml
‚îî‚îÄ‚îÄ docs/
‚îî‚îÄ‚îÄ joxcoder_integration.md

text

### 2. ENDPOINTS API NECESARIOS:
```python
# Endpoints principales
POST /api/joxcoder/analyze-repo     # Analizar repositorio
POST /api/joxcoder/generate-code    # Generar c√≥digo nuevo
POST /api/joxcoder/refactor-code    # Refactorizar c√≥digo existente
POST /api/joxcoder/fix-bugs         # Corregir errores
POST /api/joxcoder/implement-feature # Implementar feature
GET  /api/joxcoder/status           # Estado del modelo
3. FLUJO DE USUARIO EN AUTOCREA:
text
1. Usuario conecta repo Git ‚Üí AUTOCREA detecta estructura
2. Usuario selecciona acci√≥n (crear, modificar, fix, etc.)
3. AUTOCREA env√≠a contexto a JoxCoder AI
4. JoxCoder analiza y genera c√≥digo
5. AUTOCREA recibe y aplica cambios
6. Usuario revisa y confirma cambios
7. AUTOCREA hace commit autom√°tico
üõ†Ô∏è COMPONENTES CR√çTICOS A IMPLEMENTAR
A. CLIENTE JOXCODER (joxcoder_client.py)
python
class JoxCoderClient:
    def __init__(self, model_path: str):
        self.model_path = model_path
        self.model = None
        self.tokenizer = None
        
    def load_model(self):
        # Cargar modelo entrenado de JoxCoder
        pass
        
    def generate_code(self, prompt: str, role: str, context: dict) -> dict:
        # Generar c√≥digo basado en rol y contexto
        pass
        
    def analyze_repository(self, repo_url: str) -> dict:
        # Analizar estructura y calidad del repo
        pass
        
    def refactor_code(self, code: str, improvements: list) -> str:
        # Refactorizar c√≥digo existente
        pass
B. ANALIZADOR DE C√ìDIGO (code_analyzer.py)
python
class CodeAnalyzer:
    def analyze_tech_stack(self, repo_path: str) -> dict:
        # Detectar: frameworks, lenguajes, arquitectura
        pass
        
    def identify_improvements(self, codebase: dict) -> list:
        # Identificar: bugs, security issues, optimizaciones
        pass
        
    def generate_context_prompt(self, analysis: dict) -> str:
        # Crear prompt contextual para JoxCoder
        pass
C. GESTOR GIT (git_manager.py)
python
class GitManager:
    def clone_repository(self, repo_url: str) -> str:
        # Clonar repo temporalmente
        pass
        
    def apply_changes(self, changes: dict, branch: str = "joxcoder-updates"):
        # Aplicar cambios generados por IA
        pass
        
    def create_pull_request(self, changes: dict, message: str):
        # Crear PR autom√°ticamente
        pass
D. INTERFAZ DE USUARIO (JoxCoderInterface.vue)
vue
<template>
  <div class="joxcoder-interface">
    <!-- Selector de rol -->
    <role-selector @role-change="handleRoleChange" />
    
    <!-- Editor de prompts -->
    <prompt-editor v-model="userPrompt" />
    
    <!-- Panel de contexto del repo -->
    <repo-context :analysis="repoAnalysis" />
    
    <!-- Botones de acci√≥n -->
    <action-buttons @generate="handleGenerate" @refactor="handleRefactor" />
    
    <!-- Resultados en tiempo real -->
    <code-results :generatedCode="generatedCode" />
  </div>
</template>
üîß CONFIGURACI√ìN (joxcoder_config.yaml)
yaml
joxcoder:
  model_path: "./models/joxcoder-v1"
  max_tokens: 2048
  temperature: 0.7
  roles:
    - "arquitecto"
    - "fullstack"
    - "frontend"
    - "backend"
    - "devops"
    - "pentester"
    - "qa"
    - "ml_engineer"
    
  supported_languages:
    - "python"
    - "javascript"
    - "typescript"
    - "java"
    - "go"
    - "rust"
    - "sql"
    
  git_integration:
    auto_commit: true
    create_pr: true
    target_branch: "main"
üé® PROMPTS POR ROL (role_prompts.json)
json
{
  "arquitecto": {
    "system_prompt": "Eres un arquitecto de software senior...",
    "examples": [
      {"input": "Dise√±a microservicios para e-commerce", "output": "Arquitectura: API Gateway, Servicio Usuarios..."}
    ]
  },
  "fullstack": {
    "system_prompt": "Eres desarrollador fullstack experto en React y Node.js...",
    "examples": [
      {"input": "Crea CRUD completo para tasks", "output": "Frontend: React components, Backend: Express routes..."}
    ]
  }
}
üîÑ FLUJOS DE TRABAJO ESPEC√çFICOS
1. CREACI√ìN DE APP DESDE CERO:
text
Usuario: "Crea app de task management con React y Node.js"
‚Üí JoxCoder genera:
   - Frontend: Componentes React, estilos, routing
   - Backend: API REST, modelos, autenticaci√≥n
   - DB: Esquemas y migraciones
   - DevOps: Docker, despliegue
2. MODIFICACI√ìN DE APP EXISTENTE:
text
Usuario: "Agrega autenticaci√≥n JWT a mi app"
‚Üí JoxCoder analiza c√≥digo actual
‚Üí Genera: middleware auth, login component, rutas protegidas
‚Üí Aplica cambios sin romper funcionalidad existente
3. CORRECCI√ìN DE BUGS:
text
Usuario: "Hay error de state en ComponenteX"
‚Üí JoxCoder analiza el componente
‚Üí Identifica el patr√≥n del error
‚Üí Genera fix + tests correspondientes
üìä MONITOREO Y LOGGING
python
# Sistema de monitoreo
class JoxCoderMonitor:
    def track_usage(self, user_id: str, action: str, result: dict):
        # Track usage para mejorar el modelo
        pass
        
    def log_performance(self, generation_time: float, quality_metrics: dict):
        # M√©tricas de performance
        pass
        
    def collect_feedback(self, user_feedback: dict):
        # Feedback para futuras mejoras
        pass
üöÄ CRITERIOS DE ACEPTACI√ìN
‚úÖ La integraci√≥n debe permitir:
Conexi√≥n autom√°tica a repositorios Git

Selecci√≥n de roles t√©cnicos (arquitecto, devops, etc.)

Generaci√≥n de c√≥digo multi-lenguaje

Aplicaci√≥n autom√°tica de cambios

Control de versiones integrado

Interfaz intuitiva para prompts

Manejo de errores robusto

Escalabilidad para m√∫ltiples usuarios

‚úÖ La UI debe incluir:
Panel de an√°lisis de repositorio

Selector de roles t√©cnicos

Editor de prompts avanzado

Vista previa de cambios

Historial de generaciones

Configuraci√≥n de opciones de generaci√≥n

‚ö†Ô∏è CONSIDERACIONES DE SEGURIDAD
Validar TODO c√≥digo generado antes de ejecutar

Sandbox para pruebas de c√≥digo

Review manual opcional antes de aplicar cambios

L√≠mites de tokens y recursos por usuario

üìà M√âTRICAS DE √âXITO
Tiempo de generaci√≥n < 30 segundos

Precisi√≥n de c√≥digo > 85% (pasa tests)

Satisfacci√≥n usuario > 4.5/5

Reducci√≥n tiempo desarrollo > 60%

INSTRUCCI√ìN FINAL:
Modifica AUTOCREA para integrar estas capacidades. El modelo JoxCoder estar√° disponible en /workspace/joxcoder-ai/models/fine-tuned/joxcoder-v1 en 6-7 horas. Prepara la infraestructura para cargar el modelo y manejar las peticiones de generaci√≥n de c√≥digo multi-rol.

text

## üéØ **QU√â HACE ESTE PROMPT:**

1. **Define estructura t√©cnica** completa para la integraci√≥n
2. **Especifica endpoints API** necesarios
3. **Dise√±a componentes cr√≠ticos** (cliente, analizador, git manager)
4. **Crea interfaz de usuario** espec√≠fica para JoxCoder
5. **Establece flujos de trabajo** realistas
6. **Incluye configuraci√≥n** y prompts por rol
7. **Define criterios de aceptaci√≥n** claros
8. **Considera seguridad** y monitoreo

## üöÄ **RESULTADO ESPERADO:**
Cuando el modelo termine de entrenar, AUTOCREA tendr√° **toda la infraestructura lista** para integrar JoxCoder AI inmediatamente y los usuarios podr√°n empezar a generar c√≥digo autom√°ticamente.