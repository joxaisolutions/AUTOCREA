// scripts/test-joxcoder.ts

/**
 * Script de testing para verificar la integraci√≥n de JoxCoder
 * 
 * Uso:
 * 1. Aseg√∫rate de tener las variables de entorno configuradas
 * 2. Ejecuta: npx tsx scripts/test-joxcoder.ts
 * 3. O en Replit: node --loader ts-node/esm scripts/test-joxcoder.ts
 */

import { JoxCoderClient } from '../lib/joxcoder/relevance-client';

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title: string) {
  console.log('\n' + '='.repeat(50));
  log(title, 'cyan');
  console.log('='.repeat(50) + '\n');
}

// Tests
async function runTests() {
  logSection('üöÄ Iniciando Tests de JoxCoder');

  // Test 1: Verificar variables de entorno
  logSection('Test 1: Variables de Entorno');
  const apiKey = process.env.RELEVANCE_API_KEY;
  const agentId = process.env.RELEVANCE_AGENT_ID;

  if (!apiKey) {
    log('‚ùå RELEVANCE_API_KEY no encontrada', 'red');
    log('   Agrega esta variable a tu .env o Replit Secrets', 'yellow');
    return;
  } else {
    log('‚úÖ RELEVANCE_API_KEY encontrada', 'green');
    log(`   Valor: ${apiKey.substring(0, 10)}...`, 'blue');
  }

  if (!agentId) {
    log('‚ùå RELEVANCE_AGENT_ID no encontrado', 'red');
    log('   Agrega esta variable a tu .env o Replit Secrets', 'yellow');
    return;
  } else {
    log('‚úÖ RELEVANCE_AGENT_ID encontrado', 'green');
    log(`   Valor: ${agentId}`, 'blue');
  }

  // Test 2: Crear cliente
  logSection('Test 2: Creaci√≥n del Cliente');
  let client: JoxCoderClient;
  
  try {
    client = new JoxCoderClient({
      apiKey,
      agentId,
    });
    log('‚úÖ Cliente JoxCoder creado exitosamente', 'green');
  } catch (error) {
    log('‚ùå Error al crear cliente', 'red');
    console.error(error);
    return;
  }

  // Test 3: Mensaje simple
  logSection('Test 3: Env√≠o de Mensaje Simple');
  log('Enviando: "Hola, ¬øpuedes confirmar que est√°s funcionando?"', 'blue');
  
  try {
    const startTime = Date.now();
    const response = await client.chat('Hola, ¬øpuedes confirmar que est√°s funcionando?');
    const duration = Date.now() - startTime;

    if (response.success) {
      log('‚úÖ Respuesta recibida exitosamente', 'green');
      log(`   Tiempo de respuesta: ${duration}ms`, 'blue');
      log(`   Conversaci√≥n ID: ${response.conversationId}`, 'blue');
      log(`   Tokens usados: ${response.tokensUsed || 'N/A'}`, 'blue');
      log('\nüìù Respuesta de JoxCoder:', 'cyan');
      console.log(response.response);
    } else {
      log('‚ùå Error en la respuesta', 'red');
      log(`   Error: ${response.error}`, 'yellow');
    }
  } catch (error) {
    log('‚ùå Error al enviar mensaje', 'red');
    console.error(error);
  }

  // Test 4: An√°lisis de c√≥digo
  logSection('Test 4: An√°lisis de C√≥digo');
  
  const testCode = `
function calculateTotal(items) {
  let total = 0;
  for (let i = 0; i < items.length; i++) {
    total += items[i].price * items[i].quantity;
  }
  return total;
}
  `.trim();

  log('Enviando c√≥digo para an√°lisis...', 'blue');
  
  try {
    const startTime = Date.now();
    const response = await client.analyzeCode(
      testCode,
      'calculate-total.js',
      '¬øC√≥mo puedo optimizar esta funci√≥n usando m√©todos modernos de JavaScript?'
    );
    const duration = Date.now() - startTime;

    if (response.success) {
      log('‚úÖ An√°lisis completado', 'green');
      log(`   Tiempo de respuesta: ${duration}ms`, 'blue');
      log('\nüìù Sugerencias de JoxCoder:', 'cyan');
      console.log(response.response);
    } else {
      log('‚ùå Error en el an√°lisis', 'red');
      log(`   Error: ${response.error}`, 'yellow');
    }
  } catch (error) {
    log('‚ùå Error al analizar c√≥digo', 'red');
    console.error(error);
  }

  // Test 5: Generaci√≥n de c√≥digo
  logSection('Test 5: Generaci√≥n de C√≥digo');
  
  log('Solicitando generaci√≥n de componente React...', 'blue');
  
  try {
    const startTime = Date.now();
    const response = await client.generateCode(
      'Un componente de tarjeta de producto con imagen, t√≠tulo, precio y bot√≥n de comprar',
      [
        'Usar TypeScript',
        'Estilos con Tailwind CSS',
        'Props tipadas',
        'Responsive design'
      ]
    );
    const duration = Date.now() - startTime;

    if (response.success) {
      log('‚úÖ C√≥digo generado', 'green');
      log(`   Tiempo de respuesta: ${duration}ms`, 'blue');
      log('\nüìù C√≥digo generado por JoxCoder:', 'cyan');
      console.log(response.response);
    } else {
      log('‚ùå Error en la generaci√≥n', 'red');
      log(`   Error: ${response.error}`, 'yellow');
    }
  } catch (error) {
    log('‚ùå Error al generar c√≥digo', 'red');
    console.error(error);
  }

  // Test 6: Historial de conversaci√≥n
  logSection('Test 6: Historial de Conversaci√≥n');
  
  const history = client.getConversationHistory();
  log(`‚úÖ Historial contiene ${history.length} mensajes`, 'green');
  
  history.forEach((msg, index) => {
    const icon = msg.role === 'user' ? 'üë§' : 'ü§ñ';
    log(`${icon} Mensaje ${index + 1} [${msg.role}]:`, 'blue');
    console.log(`   ${msg.content.substring(0, 100)}${msg.content.length > 100 ? '...' : ''}`);
  });

  // Resumen final
  logSection('üìä Resumen de Tests');
  log('Todos los tests completados', 'green');
  log('\n‚ú® JoxCoder est√° correctamente integrado y funcionando', 'cyan');
  log('\nPr√≥ximos pasos:', 'yellow');
  log('1. Integra el componente UI en tu dashboard', 'reset');
  log('2. Configura el API route en Next.js', 'reset');
  log('3. Crea la tabla de Supabase para historial', 'reset');
  log('4. Agrega el link en tu navegaci√≥n', 'reset');
  log('\n¬°Listo para usar JoxCoder en AUTOCREA! üéâ', 'green');
}

// Ejecutar tests
runTests().catch(error => {
  log('\n‚ùå Error fatal en los tests:', 'red');
  console.error(error);
  process.exit(1);
});