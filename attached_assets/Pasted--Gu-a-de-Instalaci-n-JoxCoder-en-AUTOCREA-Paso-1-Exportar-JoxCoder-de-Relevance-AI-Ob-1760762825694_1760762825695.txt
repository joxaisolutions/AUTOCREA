# üöÄ Gu√≠a de Instalaci√≥n: JoxCoder en AUTOCREA

## Paso 1: Exportar JoxCoder de Relevance AI

### Obtener Credenciales API

1. **Ir a Relevance AI Dashboard**
   - Abre tu dashboard en https://relevance.ai

2. **Navega a Settings ‚Üí API Keys**
   - Copia tu **API Key**
   - An√≥tala, la necesitar√°s en el `.env`

3. **Obtener Agent ID**
   - Ve a tu agente JoxCoder
   - En la URL ver√°s algo como: `relevance.ai/agents/agent_xxxxx`
   - Copia el ID del agente (la parte `agent_xxxxx`)
   
4. **Exportar configuraci√≥n (opcional)**
   - Haz clic en el bot√≥n "Export agent"
   - Guarda el archivo JSON como respaldo

---

## Paso 2: Configurar Variables de Entorno en Replit

### Agregar al archivo `.env`

```bash
# JoxCoder - Relevance AI Integration
RELEVANCE_API_KEY=tu_api_key_aqui
RELEVANCE_AGENT_ID=agent_tu_id_aqui
RELEVANCE_PROJECT_ID=tu_project_id_aqui
RELEVANCE_BASE_URL=https://api-bcbe99.stack.tryrelevance.com/latest

# Opcional: Para analytics de uso
JOXCODER_ANALYTICS_ENABLED=true
```

### En Replit:

1. Ve a **Tools** ‚Üí **Secrets**
2. Agrega cada variable con su valor
3. O edita el archivo `.env` directamente

---

## Paso 3: Instalar Archivos en tu Proyecto

### Estructura de archivos:

```
autocrea/
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îî‚îÄ‚îÄ joxcoder/
‚îÇ       ‚îî‚îÄ‚îÄ relevance-client.ts       ‚Üê Copia el primer artifact aqu√≠
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ joxcoder/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ chat/
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ route.ts          ‚Üê Copia el tercer artifact aqu√≠
‚îÇ   ‚îî‚îÄ‚îÄ dashboard/
‚îÇ       ‚îî‚îÄ‚îÄ joxcoder/
‚îÇ           ‚îî‚îÄ‚îÄ page.tsx              ‚Üê Crea esta p√°gina (ver abajo)
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ joxcoder/
        ‚îî‚îÄ‚îÄ JoxCoderChat.tsx          ‚Üê Copia el segundo artifact aqu√≠
```

---

## Paso 4: Crear la Tabla en Supabase (Opcional)

Si quieres guardar el historial de conversaciones:

```sql
-- Crear tabla para historial de JoxCoder
CREATE TABLE joxcoder_conversations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  conversation_id TEXT NOT NULL,
  message TEXT NOT NULL,
  response TEXT NOT NULL,
  tokens_used INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- √çndices para mejor performance
CREATE INDEX idx_joxcoder_user_id ON joxcoder_conversations(user_id);
CREATE INDEX idx_joxcoder_conversation_id ON joxcoder_conversations(conversation_id);
CREATE INDEX idx_joxcoder_created_at ON joxcoder_conversations(created_at DESC);

-- RLS (Row Level Security)
ALTER TABLE joxcoder_conversations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own conversations"
  ON joxcoder_conversations FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own conversations"
  ON joxcoder_conversations FOR INSERT
  WITH CHECK (auth.uid() = user_id);
```

---

## Paso 5: Crear la P√°gina del Dashboard

Crea el archivo `app/dashboard/joxcoder/page.tsx`:

```typescript
import JoxCoderChat from '@/components/joxcoder/JoxCoderChat';

export default function JoxCoderPage() {
  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900">
          JoxCoder Assistant
        </h1>
        <p className="text-gray-600 mt-2">
          Tu asistente de desarrollo especializado en el stack de AUTOCREA
        </p>
      </div>
      
      <JoxCoderChat />
    </div>
  );
}
```

---

## Paso 6: Agregar al Men√∫ de Navegaci√≥n

En tu componente de navegaci√≥n (ej: `Sidebar.tsx`), agrega:

```typescript
{
  name: 'JoxCoder',
  href: '/dashboard/joxcoder',
  icon: CodeIcon, // o el √≠cono que prefieras
}
```

---

## Paso 7: Instalar Dependencias (si es necesario)

```bash
npm install lucide-react
```

O si usas otro gestor de paquetes:
```bash
yarn add lucide-react
pnpm add lucide-react
```

---

## Paso 8: Probar la Integraci√≥n

### Test b√°sico desde la consola de Replit:

```typescript
// Test en la Shell de Replit
import { JoxCoderClient } from './lib/joxcoder/relevance-client';

const client = new JoxCoderClient({
  apiKey: process.env.RELEVANCE_API_KEY!,
  agentId: process.env.RELEVANCE_AGENT_ID!,
});

const response = await client.chat('Hola JoxCoder, ¬øest√°s funcionando?');
console.log(response);
```

### Test desde el navegador:

1. Inicia tu servidor de desarrollo
2. Navega a `/dashboard/joxcoder`
3. Env√≠a un mensaje de prueba
4. Verifica que recibas respuesta

---

## Paso 9: Troubleshooting

### Error: "API Key inv√°lida"
- Verifica que copiaste la API Key completa
- Aseg√∫rate de que no haya espacios al principio o final
- Revisa que la key est√© en `.env` o en Replit Secrets

### Error: "Agent not found"
- Confirma que el Agent ID sea correcto
- Verifica que el agente est√© activo en Relevance AI
- Prueba el agente directamente en Relevance AI primero

### Error: "CORS" o problemas de red
- Verifica que la URL base sea correcta para tu regi√≥n
- Algunas regiones usan URLs diferentes:
  - US: `https://api-bcbe99.stack.tryrelevance.com/latest`
  - EU: `https://api-eu.relevance.ai/latest`
- Contacta a soporte de Relevance para confirmar tu endpoint

### Las respuestas son muy lentas
- Esto es normal, los agentes de IA pueden tardar 5-15 segundos
- Considera agregar un indicador de "escribiendo..." (ya incluido)
- Puedes implementar streaming si Relevance lo soporta

### No se guarda el historial
- Verifica que creaste la tabla en Supabase
- Confirma que el usuario est√° autenticado
- Revisa los logs de consola para errores de base de datos

---

## Paso 10: Personalizaci√≥n Avanzada

### Agregar contexto autom√°tico del proyecto

Modifica el cliente para incluir info del proyecto actual:

```typescript
// En JoxCoderChat.tsx, antes de enviar el mensaje
const projectContext = {
  projectInfo: `
    Proyecto: ${currentProject.name}
    Stack: Next.js 14, Supabase, Stripe
    Caracter√≠sticas: ${currentProject.features.join(', ')}
  `,
  files: currentFiles // Si tienes archivos abiertos
};
```

### Agregar comandos r√°pidos

```typescript
const quickCommands = [
  {
    label: "Revisar c√≥digo",
    prompt: "Revisa este c√≥digo y sugiere mejoras: "
  },
  {
    label: "Explicar error",
    prompt: "Tengo este error, ¬øpuedes ayudarme a solucionarlo?: "
  },
  {
    label: "Generar componente",
    prompt: "Genera un componente React para: "
  },
  {
    label: "Optimizar performance",
    prompt: "¬øC√≥mo puedo optimizar el performance de: "
  }
];
```

### Integrar con el editor de c√≥digo

Si tienes un editor en AUTOCREA, puedes enviar c√≥digo autom√°ticamente:

```typescript
const sendCodeToJoxCoder = async (code: string, question: string) => {
  const joxcoder = getJoxCoder();
  return await joxcoder.analyzeCode(code, 'current-file.tsx', question);
};
```

---

## Paso 11: Monitoreo y Analytics

### Crear dashboard de uso

```typescript
// app/dashboard/joxcoder/analytics/page.tsx
export default async function JoxCoderAnalytics() {
  const supabase = createServerComponentClient({ cookies });
  
  const { data: stats } = await supabase
    .from('joxcoder_conversations')
    .select('*')
    .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());
  
  const totalConversations = stats?.length || 0;
  const totalTokens = stats?.reduce((sum, conv) => sum + (conv.tokens_used || 0), 0) || 0;
  
  return (
    <div>
      <h2>Uso de JoxCoder - √öltimos 30 d√≠as</h2>
      <div className="grid grid-cols-3 gap-4">
        <div className="stat-card">
          <p>Conversaciones</p>
          <p className="text-3xl font-bold">{totalConversations}</p>
        </div>
        <div className="stat-card">
          <p>Tokens Usados</p>
          <p className="text-3xl font-bold">{totalTokens.toLocaleString()}</p>
        </div>
        <div className="stat-card">
          <p>Promedio/Conversaci√≥n</p>
          <p className="text-3xl font-bold">
            {Math.round(totalTokens / totalConversations || 0)}
          </p>
        </div>
      </div>
    </div>
  );
}
```

---

## Paso 12: L√≠mites y Rate Limiting

### Implementar l√≠mites por usuario

```typescript
// En el API route, antes de llamar a JoxCoder
const { data: userUsage } = await supabase
  .from('joxcoder_conversations')
  .select('id')
  .eq('user_id', session.user.id)
  .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());

const dailyLimit = 50; // 50 mensajes por d√≠a
if (userUsage && userUsage.length >= dailyLimit) {
  return NextResponse.json(
    { 
      success: false, 
      error: 'Has alcanzado tu l√≠mite diario de consultas a JoxCoder. Intenta ma√±ana.' 
    },
    { status: 429 }
  );
}
```

---

## Paso 13: Webhooks y Notificaciones (Opcional)

Si quieres notificar cuando JoxCoder responde lentamente o hay errores:

```typescript
// lib/joxcoder/notifications.ts
export async function notifySlowResponse(userId: string, duration: number) {
  if (duration > 30000) { // M√°s de 30 segundos
    await fetch('/api/notifications', {
      method: 'POST',
      body: JSON.stringify({
        userId,
        type: 'joxcoder_slow_response',
        message: 'JoxCoder est√° tardando m√°s de lo normal'
      })
    });
  }
}
```

---

## Checklist Final ‚úÖ

Antes de considerar la integraci√≥n completa:

- [ ] Variables de entorno configuradas en Replit
- [ ] Archivo `relevance-client.ts` creado en `lib/joxcoder/`
- [ ] API Route creado en `app/api/joxcoder/chat/route.ts`
- [ ] Componente de UI creado en `components/joxcoder/JoxCoderChat.tsx`
- [ ] P√°gina del dashboard creada en `app/dashboard/joxcoder/page.tsx`
- [ ] Tabla de Supabase creada (opcional pero recomendado)
- [ ] Link agregado al men√∫ de navegaci√≥n
- [ ] Test exitoso enviando un mensaje
- [ ] Verificado que las respuestas se muestran correctamente
- [ ] Implementado rate limiting (opcional)
- [ ] Analytics configurado (opcional)

---

## Recursos Adicionales

### Documentaci√≥n de Relevance AI
- [API Reference](https://relevance.ai/docs/api)
- [Agent Configuration](https://relevance.ai/docs/agents)
- [Webhooks](https://relevance.ai/docs/webhooks)

### Soporte
- Si tienes problemas con la API de Relevance: support@relevance.ai
- Para problemas de integraci√≥n en AUTOCREA: Contacta a tu equipo

### Actualizaciones
Este documento ser√° actualizado a medida que se descubran mejores pr√°cticas o nuevas caracter√≠sticas de Relevance AI.

---

**√öltima actualizaci√≥n:** Octubre 2025
**Versi√≥n:** 1.0.0