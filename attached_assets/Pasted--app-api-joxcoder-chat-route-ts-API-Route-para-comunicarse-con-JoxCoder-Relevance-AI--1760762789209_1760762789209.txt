// app/api/joxcoder/chat/route.ts

/**
 * API Route para comunicarse con JoxCoder (Relevance AI)
 * 
 * Este endpoint:
 * - Recibe mensajes del frontend
 * - Los envía a JoxCoder en Relevance AI
 * - Devuelve la respuesta al cliente
 * - Maneja errores y autenticación
 */

import { NextRequest, NextResponse } from 'next/server';
import { getJoxCoder } from '@/lib/joxcoder/relevance-client';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

export const runtime = 'edge'; // Usa Edge Runtime para mejor performance

interface ChatRequest {
  message: string;
  conversationId?: string;
  context?: {
    files?: Array<{ name: string; content: string }>;
    projectInfo?: string;
  };
}

export async function POST(request: NextRequest) {
  try {
    // 1. AUTENTICACIÓN (Opcional - comenta si no quieres requerir login)
    const supabase = createServerComponentClient({ cookies });
    const { data: { session } } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      );
    }

    // 2. VALIDAR REQUEST
    const body: ChatRequest = await request.json();
    
    if (!body.message || body.message.trim().length === 0) {
      return NextResponse.json(
        { success: false, error: 'El mensaje no puede estar vacío' },
        { status: 400 }
      );
    }

    // 3. OBTENER CLIENTE DE JOXCODER
    const joxcoder = getJoxCoder();

    // 4. ENVIAR MENSAJE A JOXCODER
    const result = await joxcoder.chat(body.message, {
      files: body.context?.files,
      projectInfo: body.context?.projectInfo || 'Proyecto AUTOCREA',
      conversationId: body.conversationId
    });

    // 5. REGISTRAR EN BASE DE DATOS (Opcional - para analytics)
    if (result.success) {
      await supabase.from('joxcoder_conversations').insert({
        user_id: session.user.id,
        conversation_id: result.conversationId,
        message: body.message,
        response: result.response,
        tokens_used: result.tokensUsed,
        created_at: new Date().toISOString()
      });
    }

    // 6. DEVOLVER RESPUESTA
    return NextResponse.json({
      success: result.success,
      response: result.response,
      conversationId: result.conversationId,
      error: result.error
    });

  } catch (error) {
    console.error('Error en API de JoxCoder:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error interno del servidor' 
      },
      { status: 500 }
    );
  }
}

// Endpoint GET para obtener historial (opcional)
export async function GET(request: NextRequest) {
  try {
    const supabase = createServerComponentClient({ cookies });
    const { data: { session } } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json(
        { success: false, error: 'No autorizado' },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const conversationId = searchParams.get('conversationId');

    const query = supabase
      .from('joxcoder_conversations')
      .select('*')
      .eq('user_id', session.user.id)
      .order('created_at', { ascending: true });

    if (conversationId) {
      query.eq('conversation_id', conversationId);
    }

    const { data, error } = await query.limit(50);

    if (error) throw error;

    return NextResponse.json({
      success: true,
      conversations: data
    });

  } catch (error) {
    console.error('Error obteniendo historial:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error interno del servidor' 
      },
      { status: 500 }
    );
  }
}