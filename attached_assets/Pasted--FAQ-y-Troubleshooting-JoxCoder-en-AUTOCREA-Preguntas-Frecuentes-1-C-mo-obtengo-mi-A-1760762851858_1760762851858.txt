# ‚ùì FAQ y Troubleshooting - JoxCoder en AUTOCREA

## Preguntas Frecuentes

### 1. ¬øC√≥mo obtengo mi API Key de Relevance AI?

**Respuesta:**
1. Ve a [Relevance AI Dashboard](https://relevance.ai)
2. Haz clic en tu perfil (esquina superior derecha)
3. Selecciona **Settings** ‚Üí **API Keys**
4. Si no tienes una, haz clic en **Create new API Key**
5. Copia la key y gu√°rdala en un lugar seguro

‚ö†Ô∏è **Importante:** La API Key solo se muestra una vez. Si la pierdes, deber√°s crear una nueva.

---

### 2. ¬øC√≥mo encuentro mi Agent ID?

**Respuesta:**
1. Ve a tu lista de agentes en Relevance AI
2. Haz clic en JoxCoder
3. Mira la URL del navegador, ver√°s algo como:
   ```
   https://relevance.ai/agents/agent_abc123xyz
   ```
4. El Agent ID es la parte despu√©s de `/agents/`: `agent_abc123xyz`

**Alternativa:**
- En la p√°gina del agente, busca la secci√≥n "Integration" o "API"
- El Agent ID deber√≠a estar visible ah√≠

---

### 3. ¬øPuedo usar JoxCoder sin autenticaci√≥n de usuarios?

**Respuesta:**
S√≠, hay dos opciones:

**Opci√≥n A: Sin autenticaci√≥n (p√∫blico)**
```typescript
// En app/api/joxcoder/chat/route.ts
// Comenta o elimina esta secci√≥n:
/*
const supabase = createServerComponentClient({ cookies });
const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return NextResponse.json(
    { success: false, error: 'No autorizado' },
    { status: 401 }
  );
}
*/
```

**Opci√≥n B: Autenticaci√≥n con API Key propia**
```typescript
// Valida un API key en los headers
const apiKey = request.headers.get('x-api-key');
if (apiKey !== process.env.YOUR_INTERNAL_API_KEY) {
  return NextResponse.json(
    { success: false, error: 'API Key inv√°lida' },
    { status: 401 }
  );
}
```

‚ö†Ô∏è **Advertencia:** Sin autenticaci√≥n, cualquiera puede usar tu API y consumir tus cr√©ditos de Relevance AI.

---

### 4. ¬øCu√°nto cuesta usar JoxCoder?

**Respuesta:**
Los costos dependen de tu plan en Relevance AI:

- **Tokens usados:** Cada mensaje consume tokens seg√∫n su longitud
- **Llamadas API:** Algunas cuentas tienen l√≠mite de llamadas/mes
- **Plan gratuito:** Usualmente incluye 10,000-50,000 tokens/mes

**C√≥mo verificar tu uso:**
1. Dashboard de Relevance AI ‚Üí Usage
2. Implementa analytics en AUTOCREA (ver gu√≠a de instalaci√≥n)

**Consejo:** Implementa rate limiting para evitar costos inesperados.

---

### 5. ¬øJoxCoder puede acceder a mis archivos en AUTOCREA?

**Respuesta:**
No autom√°ticamente. Debes enviar los archivos expl√≠citamente:

```typescript
// Ejemplo: Enviar c√≥digo de un archivo al chat
const fileContent = await readFile('path/to/file.tsx');

const response = await joxcoder.chat(
  '¬øPuedes revisar este c√≥digo?',
  {
    files: [
      { name: 'component.tsx', content: fileContent }
    ]
  }
);
```

Para integraci√≥n autom√°tica, necesitar√≠as:
1. Detector de archivos abiertos en tu editor
2. Sistema para adjuntar autom√°ticamente el contexto
3. Permisos del usuario para compartir c√≥digo

---

### 6. ¬øPuedo personalizar las respuestas de JoxCoder?

**Respuesta:**
S√≠, de varias formas:

**En Relevance AI:**
- Edita las instrucciones del agente
- Modifica el prompt del sistema
- Agrega ejemplos de respuestas deseadas

**En tu c√≥digo:**
```typescript
// Agrega contexto espec√≠fico antes de cada mensaje
const enrichedMessage = `
Contexto: Estamos usando Next.js 14 con App Router
Stack: ${projectStack}
Preferencias: C√≥digo en TypeScript, siempre con manejo de errores

Usuario pregunta: ${userMessage}
`;
```

---

### 7. ¬øLas conversaciones se guardan autom√°ticamente?

**Respuesta:**
Depende de tu implementaci√≥n:

- **Si creaste la tabla de Supabase:** S√≠, se guardan (ver paso 4 de la gu√≠a)
- **Si no:** No, solo se mantienen en memoria durante la sesi√≥n

Para habilitar guardado:
1. Crea la tabla en Supabase (ver gu√≠a SQL)
2. Descomenta la secci√≥n de guardado en el API route
3. Configura RLS (Row Level Security) para privacidad

---

### 8. ¬øPuedo usar JoxCoder con otros modelos (GPT-4, Gemini, etc.)?

**Respuesta:**
No directamente. JoxCoder est√° configurado espec√≠ficamente en Relevance AI.

**Alternativas:**
1. **Crear m√∫ltiples agentes:** Un agente por modelo en Relevance
2. **Cambiar de plataforma:** Migrar a una soluci√≥n que soporte m√∫ltiples modelos
3. **Wrapper personalizado:** Crear tu propia abstracci√≥n que permita cambiar backends

---

### 9. ¬øQu√© hago si JoxCoder da respuestas incorrectas?

**Respuesta:**

1. **Revisa el prompt:**
   - ¬øEst√° claro y espec√≠fico?
   - ¬øIncluiste contexto suficiente?

2. **Mejora las instrucciones del agente en Relevance:**
   - Agrega ejemplos de respuestas correctas
   - Especifica el formato de salida deseado
   - Incluye casos edge que debe considerar

3. **Feedback loop:**
   ```typescript
   // Implementa sistema de feedback
   const sendFeedback = async (messageId: string, isHelpful: boolean) => {
     await supabase.from('joxcoder_feedback').insert({
       message_id: messageId,
       helpful: isHelpful,
       timestamp: new Date()
     });
   };
   ```

4. **Re-entrena o ajusta:** Usa los feedbacks para mejorar el agente

---

### 10. ¬øPuedo usar JoxCoder en producci√≥n?

**Respuesta:**
S√≠, pero considera:

‚úÖ **Antes de lanzar:**
- [ ] Implementa rate limiting robusto
- [ ] Configura monitoreo de errores (Sentry, etc.)
- [ ] Establece l√≠mites de uso por usuario
- [ ] Implementa cach√© para preguntas comunes
- [ ] Configura alertas para uso an√≥malo
- [ ] Prueba bajo carga (stress testing)
- [ ] Documenta el comportamiento esperado
- [ ] Ten un plan de contingencia si Relevance tiene downtime

üîí **Seguridad:**
- Valida y sanitiza todos los inputs
- No expongas API keys en el frontend
- Implementa CORS correctamente
- Usa HTTPS siempre
- Protege endpoints con autenticaci√≥n

üìä **Costos:**
- Calcula el costo promedio por usuario
- Establece presupuesto mensual
- Monitorea uso en tiempo real
- Considera plan empresarial si es necesario

---

## Errores Comunes y Soluciones

### Error: `TypeError: fetch failed`

**Causa:** Problemas de red o URL incorrecta

**Soluci√≥n:**
```typescript
// Verifica la URL base en .env
RELEVANCE_BASE_URL=https://api-bcbe99.stack.tryrelevance.com/latest

// Si est√°s en Europa, prueba:
RELEVANCE_BASE_URL=https://api-eu.relevance.ai/latest
```

---

### Error: `401 Unauthorized`

**Causa:** API Key inv√°lida o expirada

**Soluciones:**
1. Verifica que la key est√© correcta (sin espacios)
2. Genera una nueva API Key en Relevance
3. Confirma que la key tenga permisos suficientes

```bash
# Test r√°pido
curl -H "Authorization: Bearer TU_API_KEY" \
  https://api-bcbe99.stack.tryrelevance.com/latest/agents
```

---

### Error: `429 Too Many Requests`

**Causa:** Excediste el l√≠mite de llamadas

**Soluci√≥n:**
```typescript
// Implementa exponential backoff
async function retryWithBackoff(fn: () => Promise<any>, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      const delay = Math.pow(2, i) * 1000; // 1s, 2s, 4s
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}
```

---

### Error: `Conversation context too long`

**Causa:** El historial de conversaci√≥n excede el l√≠mite de tokens

**Soluci√≥n:**
```typescript
// Limita el historial a los √∫ltimos N mensajes
const MAX_HISTORY_LENGTH = 10;

if (conversationHistory.length > MAX_HISTORY_LENGTH) {
  conversationHistory = conversationHistory.slice(-MAX_HISTORY_LENGTH);
}

// O implementa resumen del historial
const summarizeHistory = async (history: Message[]) => {
  // Usa JoxCoder para resumir el historial
  const summary = await joxcoder.chat(
    `Resume esta conversaci√≥n en 2-3 oraciones: ${JSON.stringify(history)}`
  );
  return summary.response;
};
```

---

### Las respuestas tardan m√°s de 30 segundos

**Causa:** Prompts muy largos o modelo sobrecargado

**Soluciones:**
1. **Reduce el tama√±o del prompt:**
   - Elimina informaci√≥n redundante
   - Resume archivos largos
   - Usa contexto m√°s espec√≠fico

2. **Implementa timeout:**
   ```typescript
   const TIMEOUT = 30000; // 30 segundos

   const responsePromise = joxcoder.chat(message);
   const timeoutPromise = new Promise((_, reject) =>
     setTimeout(() => reject(new Error('Timeout')), TIMEOUT)
   );

   const response = await Promise.race([responsePromise, timeoutPromise]);
   ```

3. **Divide en m√∫ltiples llamadas:**
   - Para tareas complejas, divide en pasos
   - Procesa cada paso por separado

---

### El componente no se renderiza

**Causa:** Error en imports o configuraci√≥n de Tailwind

**Soluci√≥n:**
```typescript
// Verifica que Tailwind est√© configurado
// tailwind.config.js
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  // ... resto de la config
}

// Verifica imports en el componente
import { Send, Loader2, Bot } from 'lucide-react'; // ‚úÖ
import { Send } from '@lucide/react'; // ‚ùå Incorrecto
```

---

## Contacto y Soporte

**Relevance AI:**
- Email: support@relevance.ai
- Docs: https://docs.relevance.ai
- Discord: https://discord.gg/relevance

**Tu equipo de AUTOCREA:**
- Revisa la documentaci√≥n interna
- Crea un ticket en tu sistema de soporte

---

**¬øTienes una pregunta que no est√° aqu√≠?**
Contacta al equipo de desarrollo de AUTOCREA o consulta la documentaci√≥n de Relevance AI.