ypescript// frontend/app/(dashboard)/chat/page.tsx (continuación)
"use client";

import { useState, useEffect, useRef } from "react";
import { useUser } from "@clerk/nextjs";
import { useMutation, useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Send, Loader2, Sparkles, Code2, Rocket } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { CodePreview } from "@/components/chat/code-preview";
import { GenerationSteps } from "@/components/chat/generation-steps";
import { toast } from "sonner";

export default function ChatPage() {
  const { user } = useUser();
  const [prompt, setPrompt] = useState("");
  const [projectName, setProjectName] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [currentProjectId, setCurrentProjectId] = useState<string | null>(null);
  
  // Queries
  const userTokens = useQuery(api.users.getTokenBalance, 
    user ? { clerkId: user.id } : "skip"
  );
  const projectStatus = useQuery(
    api.projects.get,
    currentProjectId ? { projectId: currentProjectId } : "skip"
  );
  const generationSteps = useQuery(
    api.generations.listByProject,
    currentProjectId ? { projectId: currentProjectId } : "skip"
  );
  
  // Mutations
  const createProject = useMutation(api.projects.create);
  
  // Auto-scroll para steps
  const stepsRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (stepsRef.current) {
      stepsRef.current.scrollTop = stepsRef.current.scrollHeight;
    }
  }, [generationSteps]);
  
  // Polling para actualizaciones en tiempo real
  useEffect(() => {
    if (currentProjectId && projectStatus?.status === "generating") {
      const interval = setInterval(() => {
        // Force refetch
      }, 2000);
      
      return () => clearInterval(interval);
    }
  }, [currentProjectId, projectStatus]);
  
  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast.error("Por favor describe qué quieres crear");
      return;
    }
    
    if (!projectName.trim()) {
      toast.error("Por favor ingresa un nombre para el proyecto");
      return;
    }
    
    if (!userTokens || userTokens < 50) {
      toast.error("Tokens insuficientes. Necesitas al menos 50 tokens.");
      return;
    }
    
    setIsGenerating(true);
    
    try {
      // Crear proyecto en Convex
      const project = await createProject({
        name: projectName,
        description: prompt,
        prompt: prompt,
      });
      
      setCurrentProjectId(project);
      
      // Llamar al backend para iniciar generación
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${await user?.getToken()}`
        },
        body: JSON.stringify({
          prompt,
          project_name: projectName,
          model_preference: "joxcoder"
        })
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || "Error al generar");
      }
      
      toast.success("Generación iniciada! Observa el progreso abajo.");
      
    } catch (error: any) {
      toast.error(error.message);
      setIsGenerating(false);
    }
  };
  
  // Calcular progreso
  const progress = generationSteps ? (generationSteps.length / 5) * 100 : 0;
  
  return (
    <div className="h-screen flex flex-col p-6 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent">
            AUTOCREA
          </h1>
          <p className="text-slate-400 text-sm mt-1">
            De idea a aplicación en minutos
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          {/* Token Balance */}
          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-3 flex items-center gap-2">
              <Sparkles className="w-4 h-4 text-yellow-400" />
              <span className="font-semibold text-slate-200">
                {userTokens ?? 0} tokens
              </span>
            </CardContent>
          </Card>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => window.location.href = "/pricing"}
            className="border-cyan-500/50 hover:bg-cyan-500/10"
          >
            Comprar Tokens
          </Button>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="flex-1 grid grid-cols-1 lg:grid-cols-2 gap-6 min-h-0">
        {/* Left: Input Panel */}
        <Card className="bg-slate-800/50 border-slate-700 flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-slate-200">
              <Code2 className="w-5 h-5 text-cyan-400" />
              Describe tu aplicación
            </CardTitle>
          </CardHeader>
          
          <CardContent className="flex-1 flex flex-col gap-4">
            {/* Project Name */}
            <div>
              <label className="text-sm text-slate-400 mb-2 block">
                Nombre del proyecto
              </label>
              <input
                type="text"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                placeholder="mi-super-app"
                className="w-full px-4 py-2 bg-slate-900/50 border border-slate-700 rounded-lg text-slate-200 placeholder:text-slate-500 focus:outline-none focus:ring-2 focus:ring-cyan-500"
                disabled={isGenerating}
              />
            </div>
            
            {/* Prompt Input */}
            <div className="flex-1 flex flex-col">
              <label className="text-sm text-slate-400 mb-2 block">
                Describe qué quieres crear
              </label>
              <Textarea
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="Ejemplo: Crear una plataforma de e-commerce con carrito de compras, pagos con Stripe, panel de administración y sistema de reviews..."
                className="flex-1 bg-slate-900/50 border-slate-700 text-slate-200 placeholder:text-slate-500 resize-none focus:ring-2 focus:ring-cyan-500"
                disabled={isGenerating}
              />
            </div>
            
            {/* Examples */}
            <div className="space-y-2">
              <p className="text-xs text-slate-500">Ejemplos rápidos:</p>
              <div className="flex flex-wrap gap-2">
                {[
                  "Landing page con formulario de contacto",
                  "Blog con CMS y autenticación",
                  "Dashboard con gráficos en tiempo real",
                  "API REST con MongoDB"
                ].map((example, i) => (
                  <button
                    key={i}
                    onClick={() => setPrompt(example)}
                    className="text-xs px-3 py-1 bg-slate-700/50 hover:bg-slate-700 border border-slate-600 rounded-full text-slate-300 transition-colors"
                    disabled={isGenerating}
                  >
                    {example}
                  </button>
                ))}
              </div>
            </div>
            
            {/* Generate Button */}
            <Button
              onClick={handleGenerate}
              disabled={isGenerating || !prompt.trim() || !projectName.trim()}
              size="lg"
              className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                  Generando...
                </>
              ) : (
                <>
                  <Rocket className="w-5 h-5 mr-2" />
                  Generar Aplicación
                </>
              )}
            </Button>
            
            <p className="text-xs text-slate-500 text-center">
              Costo estimado: 50 tokens (~2-3 minutos)
            </p>
          </CardContent>
        </Card>
        
        {/* Right: Progress & Preview */}
        <div className="flex flex-col gap-6 min-h-0">
          {/* Generation Steps */}
          {currentProjectId && (
            <Card className="bg-slate-800/50 border-slate-700 flex flex-col max-h-[50%]">
              <CardHeader>
                <CardTitle className="flex items-center justify-between text-slate-200">
                  <span className="flex items-center gap-2">
                    <Loader2 className={`w-5 h-5 ${isGenerating ? 'animate-spin' : ''} text-cyan-400`} />
                    Progreso de Generación
                  </span>
                  <span className="text-sm font-normal text-slate-400">
                    {Math.round(progress)}%
                  </span>
                </CardTitle>
                <Progress value={progress} className="mt-2" />
              </CardHeader>
              
              <CardContent className="flex-1 overflow-y-auto" ref={stepsRef}>
                <GenerationSteps steps={generationSteps ?? []} />
              </CardContent>
            </Card>
          )}
          
          {/* Code Preview */}
          {projectStatus?.code && (
            <Card className="bg-slate-800/50 border-slate-700 flex-1 flex flex-col min-h-0">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-slate-200">
                  <Code2 className="w-5 h-5 text-green-400" />
                  Vista Previa del Código
                </CardTitle>
              </CardHeader>
              
              <CardContent className="flex-1 min-h-0">
                <CodePreview code={projectStatus.code} />
              </CardContent>
            </Card>
          )}
          
          {/* Empty State */}
          {!currentProjectId && (
            <Card className="bg-slate-800/50 border-slate-700 flex-1 flex items-center justify-center">
              <CardContent className="text-center">
                <Code2 className="w-16 h-16 mx-auto text-slate-600 mb-4" />
                <p className="text-slate-400 text-lg font-medium mb-2">
                  Comienza a crear
                </p>
                <p className="text-slate-500 text-sm">
                  Describe tu aplicación y presiona "Generar"
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}3.2 Componente de Steps de Generacióntypescript// frontend/components/chat/generation-steps.tsx
import { CheckCircle2, Circle, Loader2, AlertCircle } from "lucide-react";

interface Step {
  _id: string;
  step: string;
  output: string;
  tokensUsed: number;
  model: string;
  _creationTime: number;
}

interface GenerationStepsProps {
  steps: Step[];
}

export function GenerationSteps({ steps }: GenerationStepsProps) {
  const stepLabels: Record<string, { title: string; icon: string }> = {
    "architecture": { 
      title: "Diseñando arquitectura", 
      icon: "🏗️" 
    },
    "backend": { 
      title: "Generando backend", 
      icon: "⚙️" 
    },
    "frontend": { 
      title: "Creando interfaz", 
      icon: "🎨" 
    },
    "devops": { 
      title: "Configurando deployment", 
      icon: "🚀" 
    },
    "security_audit": { 
      title: "Auditando seguridad", 
      icon: "🔒" 
    }
  };
  
  if (steps.length === 0) {
    return (
      <div className="flex items-center justify-center h-full text-slate-500">
        Esperando inicio de generación...
      </div>
    );
  }
  
  return (
    <div className="space-y-4">
      {steps.map((step, index) => {
        const isLast = index === steps.length - 1;
        const stepInfo = stepLabels[step.step] || { 
          title: step.step, 
          icon: "📝" 
        };
        
        return (
          <div key={step._id} className="flex gap-3">
            {/* Icon */}
            <div className="flex-shrink-0">
              {isLast ? (
                <Loader2 className="w-5 h-5 text-cyan-400 animate-spin" />
              ) : (
                <CheckCircle2 className="w-5 h-5 text-green-400" />
              )}
            </div>
            
            {/* Content */}
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-1">
                <span className="text-xl">{stepInfo.icon}</span>
                <p className="font-medium text-slate-200">
                  {stepInfo.title}
                </p>
              </div>
              
              {step.output && (
                <p className="text-sm text-slate-400 mt-1 line-clamp-2">
                  {step.output}
                </p>
              )}
              
              <div className="flex items-center gap-4 mt-2 text-xs text-slate-500">
                <span>Modelo: {step.model}</span>
                <span>•</span>
                <span>{step.tokensUsed} tokens</span>
                <span>•</span>
                <span>
                  {new Date(step._creationTime).toLocaleTimeString()}
                </span>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}3.3 Componente de Preview de Códigotypescript// frontend/components/chat/code-preview.tsx
"use client";

import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Download, Copy, Eye, Code } from "lucide-react";
import Editor from "@monaco-editor/react";
import { toast } from "sonner";

interface CodePreviewProps {
  code: {
    files: Record<string, string>;
    architecture?: string;
    security_audit?: string;
  };
}

export function CodePreview({ code }: CodePreviewProps) {
  const [selectedFile, setSelectedFile] = useState<string>(
    Object.keys(code.files)[0] || ""
  );
  const [viewMode, setViewMode] = useState<"code" | "preview">("code");
  
  const fileExtension = selectedFile.split('.').pop();
  const language = {
    'ts': 'typescript',
    'tsx': 'typescript',
    'js': 'javascript',
    'jsx': 'javascript',
    'py': 'python',
    'html': 'html',
    'css': 'css',
    'json': 'json',
    'yml': 'yaml',
    'yaml': 'yaml',
    'md': 'markdown'
  }[fileExtension || ''] || 'plaintext';
  
  const handleCopy = () => {
    navigator.clipboard.writeText(code.files[selectedFile]);
    toast.success("Código copiado al portapapeles");
  };
  
  const handleDownload = () => {
    // Crear ZIP con todos los archivos
    // Aquí usarías una librería como JSZip
    toast.success("Descargando proyecto...");
  };
  
  return (
    <div className="flex flex-col h-full">
      {/* Toolbar */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Button
            variant={viewMode === "code" ? "default" : "outline"}
            size="sm"
            onClick={() => setViewMode("code")}
          >
            <Code className="w-4 h-4 mr-2" />
            Código
          </Button>
          <Button
            variant={viewMode === "preview" ? "default" : "outline"}
            size="sm"
            onClick={() => setViewMode("preview")}
          >
            <Eye className="w-4 h-4 mr-2" />
            Preview
          </Button>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={handleCopy}>
            <Copy className="w-4 h-4 mr-2" />
            Copiar
          </Button>
          <Button variant="outline" size="sm" onClick={handleDownload}>
            <Download className="w-4 h-4 mr-2" />
            Descargar
          </Button>
        </div>
      </div>
      
      {/* File Tabs */}
      <Tabs value={selectedFile} onValueChange={setSelectedFile} className="flex-1 flex flex-col min-h-0">
        <TabsList className="w-full justify-start overflow-x-auto bg-slate-900/50">
          {Object.keys(code.files).map((filename) => (
            <TabsTrigger
              key={filename}
              value={filename}
              className="text-xs"
            >
              {filename.split('/').pop()}
            </TabsTrigger>
          ))}
        </TabsList>
        
        {/* Code Editor */}
        {Object.entries(code.files).map(([filename, content]) => (
          <TabsContent
            key={filename}
            value={filename}
            className="flex-1 min-h-0 mt-0"
          >
            {viewMode === "code" ? (
              <Editor
                height="100%"
                language={language}
                value={content}
                theme="vs-dark"
                options={{
                  readOnly: true,
                  minimap: { enabled: false },
                  fontSize: 13,
                  lineNumbers: "on",
                  scrollBeyondLastLine: false,
                  automaticLayout: true,
                }}
              />
            ) : (
              <iframe
                srcDoc={content}
                className="w-full h-full bg-white rounded border border-slate-700"
                sandbox="allow-scripts"
              />
            )}
          </TabsContent>
        ))}
      </Tabs>
    </div>
  );
}🔐 FASE 4: BACKEND ROBUSTO {#fase-4}4.1 Main FastAPI Apppython# backend/app/main.py
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import sentry_sdk
from sentry_sdk.integrations.fastapi import FastApiIntegration
import os

from app.api.routes import generate, projects, webhooks
from app.core.config import settings

# Sentry para error tracking
if settings.SENTRY_DSN:
    sentry_sdk.init(
        dsn=settings.SENTRY_DSN,
        integrations=[FastApiIntegration()],
        traces_sample_rate=1.0,
    )

app = FastAPI(
    title="AUTOCREA API",
    description="Backend para generación autónoma de aplicaciones",
    version="2.0.0",
    docs_url="/docs" if settings.ENV != "production" else None
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    sentry_sdk.capture_exception(exc)
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Internal server error",
            "error": str(exc) if settings.ENV != "production" else "An error occurred"
        }
    )

# Health check
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "version": "2.0.0",
        "joxcoder_available": bool(os.getenv("JOXCODER_API_KEY"))
    }

# Include routers
app.include_router(generate.router, prefix="/api")
app.include_router(projects.router, prefix="/api")
app.include_router(webhooks.router, prefix="/api")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.ENV == "development"
    )4.2 Configuraciónpython# backend/app/core/config.py
from pydantic_settings import BaseSettings
from typing import List

class Settings(BaseSettings):
    # Environment
    ENV: str = "development"
    
    # Security
    JWT_SECRET: str
    ALLOWED_ORIGINS: List[str] = ["http://localhost:3000"]
    
    # JoxCoder
    JOXCODER_API_URL: str
    JOXCODER_API_KEY: str
    
    # Optional APIs
    OPENAI_API_KEY: str | None = None
    ANTHROPIC_API_KEY: str | None = None
    
    # Database
    CONVEX_DEPLOY_KEY: str
    REDIS_URL: str = "redis://localhost:6379"
    
    # Stripe
    STRIPE_SECRET_KEY: str
    STRIPE_WEBHOOK_SECRET: str
    
    # Storage
    AWS_ACCESS_KEY_ID: str
    AWS_SECRET_ACCESS_KEY: str
    AWS_S3_BUCKET: str
    
    # Monitoring
    SENTRY_DSN: str | None = None
    AXIOM_TOKEN: str | None = None
    
    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()4.3 Security & Authpython# backend/app/core/security.py
from fastapi import HTTPException, Security, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWTError
from app.core.config import settings

security = HTTPBearer()

async def verify_token(
    credentials: HTTPAuthorizationCredentials = Security(security)
) -> dict:
    """
    Verifica el JWT token de Clerk
    """
    token = credentials.credentials
    
    try:
        # Decodificar token (Clerk usa RS256)
        payload = jwt.decode(
            token,
            settings.JWT_SECRET,
            algorithms=["RS256"],
            options={"verify_signature": False}  # Clerk maneja la verificación
        )
        
        return payload
        
    except JWTError as e:
        raise HTTPException(
            status_code=401,
            detail="Invalid authentication token"
        )

async def get_current_user(token_payload: dict = Depends(verify_token)):
    """
    Obtiene información del usuario actual desde el token
    """
    user_id = token_payload.get("sub")
    
    if not user_id:
        raise HTTPException(status_code=401, detail="Invalid token payload")
    
    return {
        "id": user_id,
        "email": token_payload.get("email"),
        "name": token_payload.get("name")
    }